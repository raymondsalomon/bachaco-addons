# -*- coding: 850 -*-
# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields,osv --- <8.0.X
from openerp.osv import fields, osv, orm
from openerp import api
#from openerp.addons.jasper_reports import jasper_report
from openerp import pooler
from datetime import  datetime
from time import time
formatter_string = "%d-%m-%y" 
#from tools.translate import_
#from openerp import tools
import sys
reload(sys)
sys.setdefaultencoding("utf-8")
#Importamos la libreria logger
import logging
#Definimos la Variable Global
_logger = logging.getLogger(__name__)

    
  




class grupo_bien(osv.osv):
    """Contiene la Informacion sobre los Grupos de Bienes"""
    _name = 'grupo_bien'
    #_rec_name = 'grupo_bien_codigo'
    _rec_name = 'grupo_bien_nombre'
    #_rec_name = 'grupo_bien_partidapre'
    
    _columns = {
        'grupo_bien_codigo': fields.char('Codigo del Grupo ',size=3,help='Registra el Codigo del Grupo'),
        'grupo_bien_nombre': fields.char('Nombre del Grupo',size=100,required=True, help='Registra el Nombre del Grupo'),
        'grupo_bien_partidapre': fields.char('Partida Presupuestaria', size=12, help='Registra la Partida Presupuestaria'),
    }
    _sql_constraints = [('grupo_bien_nombre', 'unique(grupo_bien_nombre)', 'El Nombre debe se único!')]    
      
grupo_bien()

class clasificador_bien(osv.osv):
    """Registra la Clasificacion de Bienes Interna"""
    
    _name = 'clasificador_bien'
    #_rec_name = 'clasificador_codigo'
    _rec_name = 'clasificador_nombre'
    #_rec_name = 'grupo_bien_id '
    
    _columns = {
        'clasificador_codigo': fields.char('Codigo del Clasificador',size=3,help='Registra el Codigo de la Clasificación del Bien (Interna)'),
        'clasificador_nombre': fields.char('Nombre del Clasificador',size=100,required=True, help='Registra el Nombre de la Clasificacion del Bien(Interna)'),
        'grupo_bien_id': fields.many2one('grupo_bien','Grupo de Bienes', required=True, help='Registra el Codigo de Vinculacion con el Grupo de Bienes'),
    }
    _sql_constraints = [('clasificador_nombre', 'unique(grupo_bien,clasificador_nombre)', 'El Nombre debe se único!')]  
    
clasificador_bien()

class modelo_bien(osv.osv):
    """Registra el Modelo de los Bienes (interno)"""
    _name = 'modelo_bien'
    #_rec_name = 'modelo_codigo'
    _rec_name = 'modelo_nombre'
    #_rec_name = 'clasificador_id'
    
    _columns = {
        'modelo_codigo': fields.char('Codigo del Modelo',size=3, help='Registra el Codigo del Modelo (Interno)'),
        'modelo_nombre': fields.char('Nombre del Modelo',size=100,required=True, help='Registra el Nombre del Modelo (Interno)'),
        'clasificador_id': fields.many2one('clasificador_bien','Clasificador de Bienes',required=True, help='Registra elCodigo de Vinculacion con el Clasificador de Bienes'),
    }
    _sql_constraints = [('modelo_nombre', 'unique(clasificador_bien,modelo_nombre)', 'El Nombre debe se único!')]      
modelo_bien()


class detalle_modelo_bien(osv.osv):
    """Registra el Detalle del Modelo de Bienes (Interno)"""
    _name = 'detalle_modelo_bien'
    #_rec_name = 'detalle_modelo_codigo'
    _rec_name = 'detalle_modelo_nombre'
    #_rec_name = 'modelo_id'
    _columns = {
		'detalle_modelo_codigo': fields.char('Codigo del Detalle',size=3,help='Registra el Codigo del Detalle del Modelo de Bienes (Interno)'),
		'detalle_modelo_nombre': fields.char('Nombre del Detalle',size=100,required=True, help='Registra el Nombre del Detalle del Modelo de Bienes (Interno)'),
		'modelo_id': fields.many2one('modelo_bien','Modelos de Bienes',required=True, help='Registra el Codigo de Vinculación con el Modelo de Bienes'),
	}
    _sql_constraints = [('detalle_modelo_nombre', 'unique(modelo_bien,detalle_modelo_nombre)', 'El Nombre debe se único!')]    
    
detalle_modelo_bien()


class color_sudebi(osv.osv):
    """Registra el Color de los Bienes segun SUDEBIP"""
    _name = 'color_sudebi'
    #_rec_name = 'color_sudebi_codigo'
    _rec_name = 'color_sudebi_nombre'
    _columns = {
        'color_sudebi_codigo': fields.char('Codigo del Color segun Sudebip',size=3, help='Registra el Codigo de Color segun (SUDEBIP)'),
        'color_sudebi_nombre': fields.char('Nombre del Color segun Sudebip',size=100,required=True, help='Registra el Nombre del Color'),
    }
    _sql_constraints = [('color_sudebi_codigo', 'unique(color_sudebi_codigo)', 'El Código debe se único!')]    
        
        
color_sudebi()

class marcas(osv.osv):
    """Registra las Marcas de los Bienes"""
    _name = 'marcas'
    #_rec_name = 'marcas_codigo'
    _rec_name = 'marcas_nombre'
    
    _columns = {
        'marcas_codigo': fields.char('Codigo de la Marca',size=3,help='Registra el Codigo de la Marca'),
        'marcas_nombre': fields.char('Nombre de la Marca',size=40,required=True, help='Registra el Nombre de la Marca'),
    }
    _sql_constraints = [('marcas_nombre', 'unique(marcas_nombre)', 'El Nombre debe se único!')]    
    
marcas()

class modelo_fab(osv.osv):
    """Registra el Modelo de Fabrica del Bien"""
    _name = 'modelo_fab'
    #_rec_name = 'modelo_fab_codigo'
    _rec_name = 'modelo_fab_nombre'
    #_rec_name = 'marcas_id'
    
    _columns = {
        'modelo_fab_codigo': fields.char('Codigo del Modelo',help='Registra el Codigo del Modelo de Fabrica'),
        'modelo_fab_nombre': fields.char('Nombre del Modelo',size=100,required=True, help='Registra el Nombre del Modelo de Fabrica'),
        'marcas_id': fields.many2one('marcas','Marcas del Modelo',required=True, help='Registra el Codigo de Vinculacion con la Marca del Bien'),
    }
    _sql_constraints = [('modelo_fab_nombre', 'unique(modelo_fab_nombre)', 'El Nombre debe se único!')]    
modelo_fab()

class material(osv.osv):
    """Registra los Materiales con que esta hecho el bien"""
    _name = 'material'
    #_rec_name = 'material_codigo'
    _rec_name = 'material_nombre'
    
    _columns = {
        'material_codigo': fields.char('Codigo del Material',size=3, help='Registra el Codigo del Material'),
        'material_nombre': fields.char('Nombre del Material',size=100,required=True,help='Registra el Nombre del Material'),
    }
    _sql_constraints = [('material_nombre', 'unique(material_nombre)', 'El Nombre debe se único!')]    
material()



class estatus_uso(osv.osv):
    """Registra el estatus de uso que tiene el Bien"""
    _name = 'estatus_uso'
    #_rec_name = 'estatus_uso_codigo'
    _rec_name = 'estatus_uso_nombre'
    
    _columns = {
        'estatus_uso_codigo': fields.char('Codigo del Estatus de Uso',size=3,required=True, help='Registra el Codigo de uso del bien'),
        'estatus_uso_nombre': fields.char('Nombre del Estatus de Uso',size=40,required=True, help='Registra la Descripcion del Estatus de uso del Bien'),
    }
    
    _sql_constraints = [('estatus_uso_codigo', 'unique(estatus_uso_codigo)', 'El Código debe se único!')]    
    
    
    
estatus_uso()

class estatus_bien(osv.osv):
    """Registra el estatus del Bien"""
    _name = 'estatus_bien'
    #_rec_name = 'estatus_bien_codigo'
    _rec_name = 'estatus_bien_nombre'
    
    _columns = {
        'estatus_bien_codigo': fields.char('Codigo del Estatus del Bien',size=3,required=True, help='Registra el Codigo del Estatus del Bien'),
        'estatus_bien_nombre': fields.char('Nombre del Estatus del bien',size=100,required=True, help='Registra la Descripcion del Estatus del Bien'),
    }
    _sql_constraints = [('estatus_bien_codigo', 'unique(estatus_bien_codigo)', 'El Código debe se único!')]    
    
    
estatus_bien()

class detalle_adquisi(osv.osv):
    """Registra el Detalle de la Adquisicion del bien"""
    _name = 'detalle_adquisi'
    _rec_name = 'detalle_adquisi_codigo'
    #_rec_name = 'forma_adquisi_id'
    #_rec_name = 'nombre_concurso'
    #_rec_name = 'fecha_concurso'
    #_rec_name = 'proveedores_id'
    #_rec_name = 'numero_contrato'
    #_rec_name = 'numero_nota_entrega'
    #_rec_name = 'fecha_nota_entrega'
    #_rec_name = 'numero_factura'
    #_rec_name = 'fecha_factura'
    #_rec_name = 'codigo_pre'
    #_rec_name = 'monto_fact'

    
    _columns = {
        'detalle_adquisi_codigo': fields.char('Codigo del Detalle',size=6,required=True, help='Registra el Codigo del Detalle de la Adquisicion del Bien'),
        'forma_adquisi_id': fields.many2one('forma_adquisicion','Forma de adquisicion', required=True,help='Registra el Codigo de Vinculacion con las Formas de Adquisicion'),
        'nombre_concurso': fields.char('Nombre del Concurso',size=100, help='Registra el Nombre del Concurso de adquisicion del bien'),
        'fecha_concurso': fields.date('Fecha del Concurso',size=8, help='Registra el Nombre la Fecha Concurso de adquisicion del bien'),
        'numero_concurso': fields.char('Numero del Concurso',size=10, help='Registra el Numero del Concurso  de adquisicion del bien'),
        'proveedores_id': fields.many2one('proveedores','Nombre del Proveedor   ', help='Registra el Codigo de Vinculacion con el Proveedor del Bien'),
        'numero_contrato': fields.char('Numero de Contrato',size=10, help='Registra el Numero de Contrato  de adquisicion del bien'),
        'fecha_contrato': fields.date('Fecha del Contrato',size=8, help='Registra la Fecha del Contrato'),
        'numero_nota_entrega': fields.char('Numero Nota de Entrega', size=30, help='Registra el Numero de Nota de Entrega del bien'),
        'fecha_nota_entrega': fields.date('Fecha_nota_Entrega',size=8, help='Registra la Fecha de Entrega del bien'),
        'numero_factura': fields.char('Numero de Factura',size=15, help='Registra el Numero de Factura del bien'),
        'fecha_factura': fields.date('Fecha de la Factura',size=8, help='Registra la Fecha de la Factura del bien'),
        'codigo_pre': fields.char('Codigo Presupuestario',size=13, help='Registra el Codigo presupuestario con el cual se compro el bien'),
        'monto_fact': fields.float('Monto de la Factura', help='Registra el Monto de la Factura'), 
        'nombre_transfiere': fields.char('Nombre de quien Transfiere',size=100, help='Registra el Nombre de quien Trasfiere'),
        'nombre_benefici':fields.char('Nombre del Beneficiario',size=100, help='Registra el Nombre del Beneficiario'),
        'num_autoriza':fields.char('Número de Autorización',size=30, help='Registra el Número de la Autorización'),
        'fecha_autoriza':fields.date('Fecha de Autorización',size=8, help='Registra la Fecha de la Autorización'),
        'nombre_registro':fields.char('Nombre del Registro',size=200, help='Registra el Nombre del Registro'),
        'tomo':fields.char('Tomo del Registro',size=20, help='Registra el Tomo del Registro'),
        'folio':fields.integer('Folio del Registro',size=6, help='Registra el Folio del Registro'),
        'fecha_registro':fields.date('Fecha de Registro',size=8, help='Registra la Fecha del Registro'),
        'numero_ordcompra': fields.char('Numero de la Orden de Compra',size=30, help='Registra el Numero de la Orden de Compra del bien'),
        'fecha_ordcompra':fields.date('Fecha de la Orden de Compra',size=8, help='Registra la Fecha de la Orden de Compra'),
        'nombre_prop_ant': fields.char('Nombre del Propietario Anterior',size=100, help='Registra el Nombre del Propietario Anterior'),
        'num_sentencia':fields.char('Número de la Sentencia',size=30, help='Registra el Número de la Sentencia ó Acto Administrativo'),
        'fecha_sentencia': fields.date('Fecha de la Sentencia',size=8, help='Registra la Fecha de la Sentencia ó Acto Administrativo'),
        'nombre_autoridad':fields.char('Nombre de la  Autoridad',size=100, help='Registra el Nombre de la Autoridad'),
        'nombre_copermutante':fields.char('Nombre del Copermutante',size=100, help='Registra el Nombre del Copermutante'),
        'nombre_licitacion':fields.char('Nombre de la Licitación',size=100, help='Registra el Nombre de la Licitación'),
        'numero_licitacion':fields.char('Número de la Licitación',size=100, help='Registra el Número de la Licitación'),
        'fecha_licitacion': fields.date('Fecha de la Licitación',size=8, help='Registra la Fecha de la Licitación'),
        'nombre_donante':fields.char('Nombre del Donante',size=100, help='Registra el Nombre del Donante'),
        'nombre_cedente':fields.char('Nombre del Cedente',size=100, help='Registra el Nombre del Cedente'),
        'numero_finiquito':fields.char('Número del Finiquito',size=100, help='Registra el Número del Finiquito'),
        'fecha_finiquito': fields.date('Fecha del Finiquito',size=8, help='Registra la Fecha del Finiquito'),
        
    }
    _sql_constraints = [('detalle_adquisi_codigo', 'unique(detalle_adquisi_codigo)', 'El Código debe se único!')]    
    
    _defaults = { 
            'fecha_concurso': '1900/01/01', 
            'fecha_contrato': '1900/01/01', 
            'fecha_nota_entrega': '1900/01/01', 
            'fecha_factura': '1900/01/01', 
            'fecha_autoriza': '1900/01/01', 
            'fecha_registro': '1900/01/01', 
            'fecha_ordcompra': '1900/01/01', 
            'fecha_sentencia': '1900/01/01', 
            'fecha_licitacion': '1900/01/01', 
            'fecha_finiquito':  '1900/01/01', }
    
detalle_adquisi()

class forma_adquisicion(osv.osv):
    """Registra las Formas de Adsquisicion del Bien"""
    _name = 'forma_adquisicion'
    #_rec_name = 'forma_adquisicion_codigo'
    _rec_name = 'forma_adquisicion_nombre'
    
    _columns = {
        'forma_adquisicion_codigo': fields.char('Codigo de la Forma de Adquisicion',size=3,required=True, help='Registra el Codigo de la Forma de Adquisicion'),
        'forma_adquisicion_nombre': fields.char('Nombre de la Forma de Adquisicion',size=40,required=True, help='Registra la descripcion de la forma de adquisicion'),
    }
    _sql_constraints = [('forma_adquisicion_codigo', 'unique(forma_adquisicion_codigo)', 'El Código debe se único!')]  
    
forma_adquisicion()

class proveedores(osv.osv):
    """Registra los Proveedores de los Bienes"""
    _name = 'proveedores'
    #_rec_name = 'proveedores_codigo'
    _rec_name = 'proveedores_nombre'
    #_rec_name = 'rif'
    #_rec_name = 'proveedores_tipo'
    #_rec_name = 'proveedores_observacion'
    
    _columns = {
        'proveedores_codigo': fields.char('Codigo del Proveedor',size=6,required=True, help='Registra el Codigo del Proveedor del Bien'),
        'proveedores_nombre': fields.char('Nombre del Proveedor',size=100,required=True, help='Registra el Nombre del Proveedor del Bien'),
        'rif': fields.char('Rif del Proveedor',size=20,required=True, help='Registra el RIF del Proveedor del Bien'),
        'proveedores_tipo':fields.selection([('N','Nacional'),('I','Internacional')],'Tipo de Proveedor', size=1, help='Registra el tipo de proveedor N para nacional I internacional'),
        #'proveedores_tipo': fields.char('Tipo de Proveedor',size=1,required=True, help='Registra el tipo de proveedor N para nacional I internacional '),
        'proveedores_observacion': fields.char('Otra Informacion del Proveedor',size=200, help='Registra Otra Informacion del Proveedor del Bien'),
    }
    _sql_constraints = [('proveedores_codigo', 'unique(proveedores_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [('proveedores_nombre', 'unique(proveedores_nombre)', 'El Nombre debe se único!')]    
        
proveedores()

class poliza(osv.osv):
    """Registra el detalle de la Poliza de Seguro"""
    _name = 'poliza'
    _rec_name = 'poliza_codigo'
    #_rec_name = 'poliza_numero'
    #_rec_name = 'aseguradoras_id'
    #_rec_name = 'poliza_tipo'
    #_rec_name = 'poliza_monto'
    #_rec_name = 'poliza_fecha_ini'
    #_rec_name = 'ploza_fecha_fin'
    #_rec_name = 'poliza_respon_civil'
    #_rec_name = 'cobertura_id'
    
    _columns = {
        'poliza_codigo': fields.char('Codigo de la Poliza',size=3,required=True, help='Registra el Codigo de la Poliza'),
        'poliza_numero': fields.char('Numero de la Poliza',size=40,required=True, help='Registra el Número de la Poliza'),
        'aseguradoras_id': fields.many2one('aseguradoras','Codigo de la Aseguradora',size=3,required =True, help='Registra el Codigo de Vinculacion con La Aseguradora del Bien'),
        'poliza_tipo':  fields.selection([('N','Nacional'),('I','Internacional')],'Tipo de Poliza',size=1,required=True, help='Registra el Tipo de Poliza N nacional I internacional'),
        'poliza_monto': fields.float('Monto Asegurado',required=True, help='Registra el Monto de la Poliza'),
        'poliza_fecha_ini': fields.date('Fecha de Inicio de la Poliza',size=8,required=True, help='Registra la Fecha de Inicio de la Poliza'),
        'ploza_fecha_fin': fields.date('Fecha Fin de la Poliza',size=8,required=True, help='Registra la Fecha de Finzalizacion de la Poliza'),
        'poliza_respon_civil': fields.selection([('S','Si'),('N','No')],'Pose Responsabilidad Civil',size=1, help='Registra si la poliza tiene  Seguro de Responsabiliad Civil Si ,No'),
        'cobertura_id': fields.many2one('cobertura','Tipo de Cobertura', help='Registra el Codigo de Vinculacion con el Tipo de Cobertura'),
    }
    _sql_constraints = [('poliza_codigo', 'unique(poliza_codigo)', 'El Código debe se único!')]  
    
    _defaults = { 
        'poliza_fecha_ini': '1900-01-01', 
        'ploza_fecha_fin': '1900-01-01', }
    
poliza()

class aseguradoras(osv.osv):
    """Registra las Compañías Aseguradoras"""
    _name = 'aseguradoras'
    _rec_name = 'aseguradoras_nombre'
    #_rec_name = 'aseguradoras_codigo'
    
    _columns = {
        'aseguradoras_nombre': fields.char('Nombre de la Aseguradora segun Sudebi',size=100,required=True, help='Registra el nombre de la Compañia aseguradora'),
        'aseguradoras_codigo': fields.char('Codigo de la Aseguradora segun Sudebi',size=5, required=True,help='Registra el Codigo de la Aseguradora'),
    }
    _sql_constraints = [('aseguradoras_codigo', 'unique(aseguradoras_codigo)', 'El Código debe se único!')]  

aseguradoras()

class cobertura(osv.osv):
    """Registra la Cobertura de la Poliza de Seguro"""
    _name = 'cobertura'
    #_rec_name = 'cobertura_codigo'
    _rec_name = 'cobertura_nombre'
    
    _columns = {
        'cobertura_codigo': fields.char('Codigo de la Cobertura',size=3,required=True, help='Registra el Codigo del tipo de Cobertura'),
        'cobertura_nombre': fields.char('Nombre de la Cobertura',size=100,required=True, help='Registra la descripcion de la Cobertura de la Poliza'),
    }
    _sql_constraints = [('cobertura_codigo', 'unique(cobertura_codigo)', 'El Código debe se único!')]  
    
cobertura()

class bienes(osv.osv):
    """Registro de Bienes"""
    _name = 'bienes'
    _rec_name = 'bienes_numbien'
   # _rec_name =  'bienes_nombre'
    #_rec_name = 'bienes_numbien_ant'
    #_rec_name = 'bienes_serial
    #_rec_name = 'grupo_bien_id'
    #_rec_name = 'clasificador_bien_id'
    #_rec_name = 'modelo_bien_id'
    #_rec_name = 'detalle_modelo_id'
    #_rec_name = 'color_id'
    #_rec_name = 'material_id'
    #_rec_name = 'oficinas_id'
    #_rec_name = 'marcas_id'
    #_rec_name = 'modelo_fab_id'
    #_rec_name = 'medidas'
    #_rec_name = 'resp_uso_id'
    #_rec_name = 'resp_pat_id'
    #_rec_name = 'costo'
    #_rec_name = 'estatus_uso_id'
    #_rec_name = 'estatus_bien_id'
    #_rec_name = 'detalle_adquisi_id'
    #_rec_name = 'catalogo_sudebi_id'
    #_rec_name = 'catalogo_sudebi_sub_id'
    #_rec_name = 'catalogo_sudebi_esp_id'
    #_rec_name = 'estado_id'
    #_rec_name = 'municipios_id'
    #_rec_name = 'parroquias_id'
    #_rec_name = 'poliza_id'
    #_rec_name = 'clase_sudebi_id'
    
    
  	
    _columns = {
        'bienes_numbien': fields.char('Numero del Bien',size=10,required=True, help='Registra el Numero de Bien Nacional'),
        'bienes_nombre': fields.text('Descripcion del Bien', size=300, required=True,help='Registra la Descripcion del Bien'),
        'bienes_numbien_ant': fields.char('Numero del Bien Anterior',size=10, help='Registra el Numero Anterior del Bien Nacional'),
        'bienes_serial': fields.char('Serial del Bien',size=50, help='Registra el Numero de Serial del Bien Nacional'),
        'bienes_piso': fields.integer('Piso',size=2, help='Registra el Piso donde se encuentra el Bien Nacional'),
        'bienes_ubica': fields.many2one('ubicacion_fisica', 'Ubicacion Fisica del Bien', size=3, help='Registra la Ubicación Física del Bien'),
        'grupo_bien_id': fields.many2one('grupo_bien', 'Grupo del Bien', size=3, help='Registra el Grupo al Cual Pertenece elBien'),
          
        'clasificador_bien_id': fields.many2one('clasificador_bien', 'Clasificador del Bien', domain="[('grupo_bien_id','=',grupo_bien_id)]", size=3, help='Registra el Codigo de Clase del Bien'),
        'modelo_bien_id': fields.many2one('modelo_bien', 'Modelo del Bien', size=3, domain="[('clasificador_id','=',clasificador_bien_id)]", help='Registra el Modelo del Bien'),   
        'detalle_modelo_id': fields.many2one('detalle_modelo_bien', 'Detalle del Modelo del Bien', size=3, domain="[('modelo_id','=',modelo_bien_id)]", help='Registra el Modelo Especifico del Bien'),
        'material_id': fields.many2one('material', 'Material del Bien', size=3, help='Registra el Material con que esta hecho el Bien'),
        'color_id': fields.many2one('color', 'Color del Bien', size=3, help='Registra el Color del Bien'),
        'oficinas_id': fields.many2one('oficinas', 'Oficina', size=3, required=True,help='Registra la Oficina donde esta Ubicado el Bien'),
        #'resp_uso_id': fields.many2one('personas', 'Responsable de Uso', size=3, domain="['|', ('oficinas_id','=',oficinas_id), ('oficinas_id', '=', oficinas_padre_id)]",help='Registra el Responsable del Uso del Bien'),
        #'oficinas_padre_id':fields.many2one('oficinas', 'Oficina', size=3),
        'resp_uso_id': fields.many2one('personas', 'Responsable de Uso', size=3, required=True,help='Registra el Responsable del Uso del Bien'),
        'marcas_id': fields.many2one('marcas', 'Marca del Bien', size=3, help='Registra la Marca del Bien'),
        'modelo_fab_id': fields.many2one('modelo_fab', 'Modelo de Fabrica', size=3, domain="[('marcas_id','=',marcas_id)]", help='Registra el Modelo de Fabrica del Bien'),
        'medidas': fields.char('Medidas del Bien', size=50, help='Registra las Medidas del Bien'),
        'resp_pat_id': fields.many2one('personas', 'Responsable Patrimonial', size=3,required=True,domain="[('tipo_resp','=','D')]", help='Registra el Responsable Patrimonial del Bien'),
        'costo': fields.float('Costo de Bien', help='Registra el Costo del Bien'),
        'estatus_uso_id': fields.many2one('estatus_uso', 'Estatus de Uso', size=3, required=True,help='Registra el Estatus de Uso del Bien '),
        'estatus_bien_id': fields.many2one('estatus_bien', 'Estatus del Bien', size=3,required=True,help='Registra el Estatus del Bien '),
        'detalle_adquisi_id': fields.many2one('detalle_adquisi', 'Detalle de Aquisicion del Bien', size=3,required=True,help ='Registra el detalle de la Adquisición del Bien'),
        'catalogo_sudebi_id': fields.many2one('catalogo_sudebi', 'Categoría  General(SUDEBIP)', required=True,help='Registra el Catalogo General de la SUDEBIP'),
        'catalogo_sudebi_sub_id': fields.many2one('catalogo_sudebi_sub','Categoría  Sub-General(SUDEBIP)',required=True, domain="[('catalogo_sudebi_id','=',catalogo_sudebi_id)]", help='Registra la Categoria Sub- General de la SUDEBIP'),
        'catalogo_sudebi_esp_id': fields.many2one('catalogo_sudebi_esp','Categoría  Específica (SUDEBIP)', domain="[('catalogo_sudebi_sub_id','=',catalogo_sudebi_sub_id)]",help='Registra la Categoria Específica de la SUDEBIP'),
        'color_sudebi_id':fields.many2one('color_sudebi','Color segun (SUDEBIP)', help='Registra el Color segun SUDEBIP'),
        'clase_sudebi_id': fields.many2one('clase_sudebi','Clases de Vehiculos segun (SUDEBIP)', help='Registra la Clase de Vehículos segun la SUDEBIP'),
        'estado_id': fields.many2one('mppp_reg_pro_estados','Entidad Federal',required=True,  domain="[('seledo','=','TRUE')]",help='Registra La Entidad Federal donde se Encuentra el Bien'),
        'municipios_id': fields.many2one('mppp_reg_pro_municipios','Municipio',required=True, domain="[('estado_id','=',estado_id) and ('selemu','=','TRUE')]", help='Registra el Municipio donde se Encuentra el Bien'),
        'parroquias_id': fields.many2one('mppp_reg_pro_parroquias','Parroquia',required=True,  domain="[('municipios_id','=',municipios_id) and ('selepa','=','TRUE')]",help='Registra la Parroquia donde se Encuentra el Bien'),
        'poliza_id': fields.many2one('poliza','Poliza de Seguro', size=3),
        'ano_fab':fields.integer('Año de Fabricación',size=4,help='Registra el año de Fabricación del Bien'),
        'serial_carro':fields.char('Serial de Carrocería',size=50,help='Registra el Serial de la Carrocería'),
        'serial_motor':fields.char('Serial del Motor',size=50,help='Registra el Serial del Motor del Bien'),
        'placas':fields.char('Placas',size=20,help='Registra las Placas o Siglas del Bien'),
        'titulo_prop':fields.char('Número del Titulo de Propiedad',size=30,help='Registra el Número del Titulo de Propiedad'),
        'capacidad':fields.char('Registra la Capacidad del Bien',size=50,help='Registra la Capacidad del Bien'),
        'uso':fields.char('Registra el Uso del Bien',size=50,help='Registra el Uso del Bien'),
        'garantia':fields.integer('Garantía',size=5,help='Registra la Garantía del Bien'),
        'unidad_garantia':fields.selection([('1','Días'),('2','Meses'),('3','Años'),('99',"No Aplica")],'Unidad de Garantía',size=2,help='Registra la Unidad de Medida de la Garantía'),
        'fecha_ini_garantia':fields.date('Fecha Inicio de la Garantía', size=8,help='Registra la Fecha de Inicio de la Garantía'),
        'fecha_fin_garantia':fields.date('Fecha Fin de la Garantía', size=8,help='Registra la Fecha de Fin de la Garantía'),
        'rastreo':fields.selection([('S','Si'),('N','No')],'Sistema de Rastreo', size=1, help='Registra si la Unidad tiene Sistema de Rastreo'),
        'desc_rastreo':fields.char('Especificación del Sistema de Raestreo', size=255, help='Registra la Especificación del Sistema de Rastreo'),
        
        
    }
    
#    def onchange_grupo_bien_id(self, cr, uid, ids, grupo_bien_id, context=None):	
#			global globa_id_grupo_bien
#			values = {}
#			#asigno la variable global a usar en los detalles de doc de venta y llenado automatico
#			# convierto la cadena que es el index seleccionado a un entero
#			globa_id_grupo_bien = int(grupo_bien_id)
#			#asignamos al campo XML [location_id] el valor del ID seleccionado - sincroniza el campo
#			values['clasificador.grupo_bien_id'] = int(grupo_bien_id)
#			return {'value': values }	
    

    #@api.multi
    #def ofici(self):
        #ofi = self.oficinas_id
        
    @api.onchange('grupo_bien_id')
    def onchange_grupo(self):
         self.clasificador_bien_id = ''
          
    @api.onchange('clasificador_bien_id')
    def onchange_clasif(self):
          self.modelo_bien_id =  ''
    
    @api.onchange('modelo_bien_id')
    def onchange_modelo(self):
          self.detalle_modelo_id =  ''
    
    @api.onchange('grupo_bien_id','clasificador_bien_id','modelo_bien_id','detalle_modelo_id','material_id','color_id')
    def onchange_categorias(self):
        catego =''
        if self.clasificador_bien_id.clasificador_nombre:
            catego += str(self.clasificador_bien_id.clasificador_nombre)
        if self.modelo_bien_id.modelo_nombre:
              catego += ' '+ str(self.modelo_bien_id.modelo_nombre)
        if self.detalle_modelo_id.detalle_modelo_nombre:
             catego += ' '+str(self.detalle_modelo_id.detalle_modelo_nombre).encode('utf-8')
        if self.material_id.material_nombre:
            catego += ' '+str(self.material_id.material_nombre)
        if  self.color_id.color_nombre:
            catego += ' '+str(self.color_id.color_nombre)
            
        #self.bienes_nombre = str(self.clasificador_bien_id.clasificador_nombre)+' '+ str(self.modelo_bien_id.modelo_nombre)+ ' ' + str(self.detalle_modelo_id.detalle_modelo_nombre).encode('utf-8') +' '+ str(self.material_id.material_nombre) +' '+ str(self.color_id.color_nombre)
        self.bienes_nombre = catego
   
       
    _sql_constraints = [('bienes_numbien', 'unique(bienes_numbien)', 'El Número de Bien debe se único!')]
 
    _defaults = { 
        'fecha_ini_garantia': '1900-01-01', 
        'fecha_fin_garantia': '1900-01-01', }
   
    
bienes()

class color(osv.osv):
    """Registra el Color de los Bienes (Interno)"""
    _name = 'color'
    #_rec_name = 'codigo_color'
    _rec_name = 'color_nombre'
    
    _columns = {
        'codigo_color': fields.char('Codigo del Color',size=3, help='Registra el Codigo de Color (Interno)'),
        'color_nombre': fields.char('Nombre del Color',size=100,required=True, help='Registra el Nombre del Color (Interno)'),
    }
    _sql_constraints = [('color_nombre', 'unique(color_nombre)', 'El Nombre debe se único!')]  
color()

class catalogo_sudebi(osv.osv):
    """Registra la Clasificacion de Bienes (SUDEBIP)"""
    _name = 'catalogo_sudebi'
    #_rec_name = 'catalogo_sudebi_codigo'
    _rec_name = 'catalogo_sudebi_nombre'
    
    _columns = {
        'catalogo_sudebi_codigo': fields.char('Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria General de la (SUDEBIP)'),
        'catalogo_sudebi_nombre': fields.char('Nombre de la Categoria',size=100,required=True, help='Nombre de la Categoria General de la (SUDEBIP)'),
    }
    _sql_constraints = [('catalogo_sudebi_codigo', 'unique(catalogo_sudebi_codigo)', 'El Código debe se único!')]

catalogo_sudebi()

class catalogo_sudebi_sub(osv.osv):
    """Registra la Sub-Clasificacion de Bienes (SUDEBIP)"""
    _name = 'catalogo_sudebi_sub'
    #_rec_name = 'catalogo_sudebi_sub_codigo'
    _rec_name = 'catalogo_sudebi_sub_nombre'
    #_rec_name = 'catalogo_sudebi_id'
    
    _columns = {
        'catalogo_sudebi_sub_codigo': fields.char('Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria Sub-General de la (SUDEBIP)'),
        'catalogo_sudebi_sub_nombre': fields.char('Nombre de la Categoria',size=100,required=True, help='Nombre de la Categoria Sub-General de la (SUDEBIP)'),
        'catalogo_sudebi_id': fields.many2one('catalogo_sudebi','Categoria General', help='Registra el Código de vinculacion con la Categoria General '),
    }
    _sql_constraints = [('catalogo_sudebi_sub_codigo', 'unique(catalogo_sudebi_sub_codigo)', 'El Código debe se único!')]
catalogo_sudebi_sub()

class catalogo_sudebi_esp(osv.osv):
    """Registra la Especifico de Bienes (SUDEBIP)"""
    _name = 'catalogo_sudebi_esp'
    #_rec_name = 'catalogo_sudebi_esp_codigo'
    _rec_name = 'catalogo_sudebi_esp_nombre'
    #_rec_name = 'catalogo_sudebi_sub_id'
    
    _columns = {
        'catalogo_sudebi_esp_codigo': fields.char('Codigo de la Categoria',size=10,required=True, help='Codigo de la Categoria Especifica de la (SUDEBIP)'),
        'catalogo_sudebi_esp_nombre': fields.char('Nombre de la Categoria',size=100,required=True, help='Nombre de la Categoria  Especifica de la (SUDEBIP)'),
        'catalogo_sudebi_sub_id': fields.many2one('catalogo_sudebi_sub','Sub-Categoria General', help='Registra el Código de vinculacion con la Categoria Sub-General '),
    }
    _sql_constraints = [('catalogo_sudebi_esp_codigo', 'unique(catalogo_sudebi_esp_codigo)', 'El Código debe se único!')]
catalogo_sudebi_esp()

class uniadm_sudebi(osv.osv):
    """Registra Categorias de Unidades Administrativas segun Sudebip"""
    _name = 'uniadm_sudebi'
    #_rec_name = 'uniadm_sudebi_codigo'
    _rec_name = 'uniadm_sudebi_nombre'
    
    _columns = {
        'uniadm_sudebi_codigo': fields.char('Codigo de Categorias de Unidades Administrativas',size=3,required=True, help='Registra el Codigo de la Categoria de Oficina (SUDEBIP)'),
        'uniadm_sudebi_nombre': fields.char('Nombre de Categorias de Unidades Administrativas',size=100,required=True, help='Registra el Nombre de la Categoria de Oficina (SUDEBIP)'),
    }
    _sql_constraints = [('uniadm_sudebi_codigo', 'unique(uniadm_sudebi_codigo)', 'El Código debe se único!')]
uniadm_sudebi()


class oficinas(osv.osv):
    """Registra las Oficinas del Ministerio"""
    _name = 'oficinas'
    #_rec_name = 'oficinas_codigo'
    _rec_name = 'oficinas_nombre'
   # _rec_name = 'oficinas_padre_id'
    #_rec_name = 'uniadm_sudebi_codigo'
    
    _columns = {
        'oficinas_codigo': fields.char('Codigo de la Oficina',size=3,required=True, help='Registra el Codigo de la Oficina'),
        'oficinas_nombre': fields.char('Nombre de la Oficina',size=100,required=True, help='Registra el Nombre de la Oficina'),
        'uniadm_sudebi_codigo': fields.many2one('uniadm_sudebi','Categorias Administrativas (SUDEBI)', help='Registra el Codigo de Vinculacion con las Categorias de Unidades Administrativas segun Sudebi '),
    
        'oficinas_padre_id': fields.many2one('oficinas','Unidad de Adscripción'),
     }
    #def name_get(self, cr, uid, ids, context=None): # Redefine el método
            #res = [] #declara la lista en blanco
            #oficinas = self.browse(cr, uid, ids, context)
            #for oficina in oficinas:
                #res.append((oficina.id, str(oficina.oficinas_padre_id) +' ' +oficina.oficinas_nombre))
            #return res    
    
     
     
    _sql_constraints = [('oficinas_codigo', 'unique(oficinas_codigo)', 'El Código debe se único!')]  
    _sql_constraints = [('oficinas_nombre', 'unique(oficinas_nombre)', 'El Nombre debe se único!')]  
oficinas()

#****************Ubicacion Fisica**************************
class ubicacion_fisica(osv.osv):
    """Registra  la Ubicación Fisica del Bien"""
    _name = 'ubicacion_fisica'
    _rec_name = 'ubicacion_fisica_nombre'
    
    _columns = {
        'ubicacion_fisica_nombre': fields.char('Nombre de la Ubicación Fiísica del Bien',size=100,required=True, help='Registra el Nombre de la Categoria de Oficina (SUDEBIP)'),
    }
    _sql_constraints = [('ubicacion_fisica_nombre', 'unique(ubicacion_fisica_nombre)', 'El Nombre debe se único!')]
ubicacion_fisica()
#****************Fin Ubicacion Fisica**************************





#class oficrep(osv.osv_memory):
    #"""Registra las Oficinas del Ministerio"""
    #_name = 'oficrep'
      
    #_columns = {
        #'ofi': fields.many2one('oficinas', 'Oficina',required=True),
 #}
    #def _get_oficrep(self,cr, uid, ctx):
            #if 'active_id' in ctx:
                #return self.pool.get('oficinas_nombre').browse(cr,uid,ctx['active_id']).oficrep_line
            #return False

    #_defaults = {
                #'ofi': _get_oficrep
                #}
   
    #def oficinas(self, cr, uid, ids, context=None):
        
        #if 'active_id' in context:
                #data={}
                #data['model']='bienes'
                #data['ids']=ids
                #data['origin_records']=True
                #data.update({'parameters':{'ofi'}})
                
                           #'report_title':"Reporte bienes con jasper",
                            #'oficinas_id':self.browse(cr,uid,ids[0]).oficinas_id.id
                            #}
                  #})
        #r= {
                #'type':'ir.actions.report.xml',
                #'report_name':'report_bienes',
                #'datas':data,
        #}
        #return r   
        
        
        #if 'active_id' in context:
            #oficicrep=self.browse(cr,uid,ids)[0].subject_line
            #self.pool.get('oficinas').write(cr,uid,context['active_id']),
            
            #r= { 
                #'type':'ir.actions.report.xml',
                #'report_name':'report_bienes'
            #}
            #return r      
                
                
        #return{'ofi': 'ir.actions.act_window',}
        
     #def check_report(self, cr, uid, ids, context=None):
      
        #data={}
        #data['model']='oficinas'
        #data['ids']=ids
        #data['origin_records']=False
        #data.update({'parameters':{
                           #'report_title':"Reporte bienes con jasper",
                            #'oficinas_id':self.browse(cr,uid,ids[0]).oficinas_id.id
                            #}
                  #})
        #r= {
                #'type':'ir.actions.report.xml',
                #'report_name':'report_bienes',
                #'datas':data,
        #}
        #return r   
        
 
#oficrep()


class personas(osv.osv):
	"""Registra las Personas que trabajan en el Ente"""
	_name = 'personas'
	_rec_name = 'personas_cedula'
	_rec_name = 'personas_pnombre'
	#_rec_name = 'personas_snombre'
	_rec_name = 'personas_papellido'    
	#_rec_name = 'personas_sapellido'
	
	
	_columns = {
        'personas_cedula': fields.integer('Cedula',size=10,required=True, help='Registra la Cedula de la persona'),
        'personas_pnombre': fields.char('Primer Nombre',size=40,required=True, help='Registra el Primer Nombre de la Persona'),
        'personas_snombre': fields.char('Segundo Nombre',size=40, help='Registra el Segundo Nombre de la Persona'),
        'personas_papellido': fields.char('Primer Apellido',size=40,required=True, help='Registra el Primer Apellido de la Persona'),
        'personas_sapellido': fields.char('Segundo Apellido',size=40, help='Registra el Segundo Apellido de la Persona'),
        'personas_cargo':fields.char('Cargo',size=100, required=True,help='Registra el Cargo de la Persona'),
        'oficinas_id': fields.many2one('oficinas','Oficinas del Ministerio', required=True,help='Registra el Codigo de Vinculacion con las Oficinas del Ministerio'),
        'tipo_resp':fields.selection([('D','Administrativo'),('U','Uso Directo'),('C','Cuido Directo')],'Tipo de Responsable',size=2,required=True,help='Tipo de Responsable'),
        'correo_e':fields.char('Correo Electronico',size=200, help='Registra el Correo Electrónico de la Persona'),
        }
       
        def name_get(self, cr, uid, ids, context=None): # Redefine el método
            res = [] #declara la lista en blanco
            personas = self.browse(cr, uid, ids, context)
            for persona in personas:
                res.append((persona.id, persona.personas_pnombre + ' ' + persona.personas_papellido))
            return res    
    
        _sql_constraints = [('personas_cedula', 'unique(personas_cedula)', 'La Cedula debe se única!')]  
    
    
personas()

class clase_sudebi(osv.osv):
    """Registra las Clases de Vehiculos"""
    _name = 'clase_sudebi'
    _rec_name = 'clase_sudebi_codigo'
    _rec_name = 'clase_sudebi_nombre'
                
    _columns = {
            'clase_sudebi_codigo': fields.char('Codigo de Clase de Vehículos',size=3,required=True, help='Registra el Codigo de Clase de Vehículos (SUDEBIP)'),
            'clase_sudebi_nombre': fields.char('Nombre de Clase de Vehículos',size=100,required=True, help='Registra el Nombre de la Clase de Vehículos(SUDEBIP)'),
    }
    _sql_constraints = [('clase_sudebi_codigo', 'unique(clase_sudebi_codigo)', 'El Código debe se único!')]


clase_sudebi()



class mppp_reg_pro_estados(osv.osv):
    """Division Geopolitica"""
    _name = 'mppp_reg_pro_estados'
    #_rec_name = 'codigo'
    _rec_name = 'estado'
    
    _columns = {
        'codigo': fields.char('Codigo del Estado',size=2,required=True, help='Registra el Código de Identificación del Estado del País'),
        'estado': fields.char('Estado',size=30,required=True, help='Registra el nombre del estado'),
        'seledo' : fields.boolean ('Seleccionado', help='Registra si el estado aplica para el organismo'),
    
    }
    
mppp_reg_pro_estados()

class mppp_reg_pro_municipios(osv.osv):
    """Division Geopolitica"""
    _name = 'mppp_reg_pro_municipios'
    #_rec_name = 'codigo'
    _rec_name = 'municipio'
    #_rec_name = 'estado_id'
    
    _columns = {
        'codigo': fields.char('Codigo del Municipio',size=2,required=True, help='Registra el Código de Identificación del Municipio del Estado del País'),
        'municipio': fields.char('Municipio',size=30,required=True, help='Registra el nombre del Municipio'),
        'estado_id': fields.many2one('mppp_reg_pro_estados','Estado', help='Registra el Codigo de Vinculación con el Estado al cual pertenece el Municipio'),
        'selemu' : fields.boolean ('Seleccionado', help='Registra si el municipio aplica para el organismo'),
    }
    
mppp_reg_pro_municipios()

class mppp_reg_pro_parroquias(osv.osv):
    """Division Geopolitica"""
    _name = 'mppp_reg_pro_parroquias'
    #_rec_name = 'codigo'
    _rec_name = 'parroquia'
    #_rec_name = 'municipios_id'
    
    _columns = {
        'codigo': fields.char('Codigo de la Parroquia',size=2,required=True, help='Registra el Código de Identificación de la Parroquia del Municipio del País'),
        'parroquia': fields.char('Parroquia',size=30,required=True, help='Registra el nombre de la Parroquia'),
        'municipios_id': fields.many2one('mppp_reg_pro_municipios','Municipios', help='Registra el Codigo de Vinculación con el Municipio al cual pertenece la Parroquia'),
        'selepa' : fields.boolean ('Seleccionado', help='Registra si la parroquia aplica para el organismo'),
    }
    
mppp_reg_pro_parroquias()

class bienes_ministerio(osv.osv):
    """datos ministero"""
    _name = 'bienes_ministerio'
    #_rec_name = 'rif'
    _rec_name = 'nsudebip'
    #_rec_name = 'fecha_remision'
    
    _columns = {
        'rif': fields.char('Rif del Ministerio',size=10,required=True, help='Registra el Rif del Ministeiro'),
        'nsudebip': fields.char('Numero del Ministerio en la Sudebip',size=18,required=True, help='Registra el Numero Asignado al Ministerio por la Sudebip'),
        'fecha_remision': fields.date('Fecha de Remision del Inventario', help='Registra la Fecha de Remision del Inventario a la Sudebip'),
        'telefono': fields.char('Numero Telefonico de la Unidad de Bienes',size=18,required=True, help='Registra el Numero telefono de la Unidad de Bienes'),
        'seleinv' : fields.boolean ('Vigencia', help='Registra si la informacion es la vigente para remitir el inventario'),
    }
    _defaults = { 
        'fecha_remision': '1900-01-01', }
        

bienes_ministerio()


class report_report_bienes_wizard(osv.osv_memory):
    #global oficinas_id,fecha_imp,fecha
    _name="report.report_bienes_wizard"
    _columns={
              'oficinas_id':fields.many2one('oficinas',"Oficinas",required=True),
              'fecha_imp':  fields.date('Fecha del Inventario', required=True ),
		
            }
    
    
        
    def check_report(self, cr, uid, ids, context=None):
       
        data={}
        data['models']='oficinas'
        data['ids']=ids
        data['origin_records']=True
        
        data.update({'parameters':{
                            'report_title':"Reporte Bienes con jasper",
                            'oficinas_id':self.browse(cr,uid,ids[0]).oficinas_id.id,
                            #'fecha_imp': time.strftime('%d-%m-%y',self.browse(cr,uid,ids[0]).fecha_imp),
                            'fecha_imp': self.browse(cr,uid,ids[0]).fecha_imp,
                            
                }
                  })
        r= {
                'type':'ir.actions.report.xml',
                'report_name':'report_bienes',
                'datas':data,
        }
      
        
        
      
        return r
report_report_bienes_wizard()










